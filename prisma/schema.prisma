generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model communitys {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model files {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model messages {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_resets {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model payments {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model users {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  email                String                 @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at    DateTime?              @db.Timestamp(0)
  password             String                 @db.VarChar(255)
  remember_token       String?                @db.VarChar(100)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  google_id            String?                @unique(map: "users_google_id_unique") @db.VarChar(255)
  conversation_members conversation_members[]
  msgs                 msgs[]
  public_keys          public_keys[]
}

model conversation_members {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  conversation_id BigInt        @db.UnsignedBigInt
  user_id         BigInt        @db.UnsignedBigInt
  joined_at       DateTime      @default(now()) @db.Timestamp(0)
  last_seen_at    DateTime?     @db.Timestamp(0)
  unread_count    Int           @default(0)
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversation_members_conversation_id_foreign")
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversation_members_user_id_foreign")

  @@unique([conversation_id, user_id], map: "conversation_members_conversation_id_user_id_unique")
  @@index([last_seen_at], map: "conversation_members_last_seen_at_index")
  @@index([user_id], map: "conversation_members_user_id_foreign")
}

model conversations {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  type                 conversations_type     @default(private)
  conversation_members conversation_members[]
  msgs                 msgs[]
}

model msgs {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  conversation_id BigInt        @db.UnsignedBigInt
  sender_id       BigInt        @db.UnsignedBigInt
  content         String?       @db.Text
  type            msgs_type     @default(text)
  status          msgs_status   @default(sent)
  public_key_id   BigInt?       @db.UnsignedBigInt
  conversations   conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "msgs_conversation_id_foreign")
  public_keys     public_keys?  @relation(fields: [public_key_id], references: [id], onUpdate: Restrict, map: "msgs_public_key_id_foreign")
  users           users         @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "msgs_sender_id_foreign")

  @@index([conversation_id, created_at], map: "msgs_conversation_id_created_at_index")
  @@index([sender_id], map: "msgs_sender_id_foreign")
  @@index([public_key_id], map: "msgs_public_key_id_foreign")
}

model public_keys {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  public_key_value String    @db.Text
  user_id          BigInt    @db.UnsignedBigInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  msgs             msgs[]
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "public_keys_user_id_foreign")

  @@index([user_id], map: "public_keys_user_id_foreign")
}

enum conversations_type {
  private
  group
}

enum msgs_type {
  text
  image
  file
}

enum msgs_status {
  sent
  delivered
  read
}
